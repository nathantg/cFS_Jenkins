pipeline {
    agent any
    
    options {
        skipDefaultCheckout(true)
    }
    
    environment {
        TO_PORT = '1238'
        ROVER_TYPE = 'lrm'
        TOOLCHAIN = 'cpu1'
        ARM_ROOT = '/home/canadensys/work/toolchains/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf'
        /* Targets for build artifacts to be sent to via SSH */
        DEPLOY_TARGET_BOARD = 'EDU Board'
        DEPLOY_TARGET_FLATSAT = 'EDU FlatSat'
        DEPLOY_TARGET_ROVER = 'EDU Rover'
        /* Directory on the respective targets relative to the user directory to send the build artifacts to (~/${REMOTE_DIR_...}) */
        REMOTE_DIR_BOARD = '/nathan/lrm/EDU_Baord'
        REMOTE_DIR_FLATSAT = '/nathan/lrm/EDU_FlatSat'
        REMOTE_DIR_ROVER = '/nathan/lrm/EDU_Rover'
        /* The directory relative to the Jenkins workspace where the files to be deployed to target are located */
        SOURCE_DIR_BOARD = 'build/exe/**/*'
        SOURCE_DIR_FLATSAT = 'build/exe/**/*'
        SOURCE_DIR_ROVER = 'build/exe/**/*'
        /* SonarQube Server URL */
        SONARQUBE_URL = 'http://192.168.8.29:9000' 
    }
    
    stages {
        stage('Checkout SCM') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
               cleanWs()
               checkout scm            
            }
        }
        stage('Preparation') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                sh 'make distclean'
                sh 'make SIMUATION=$TOOLCHAIN ENABLE_UNIT_TESTS=true prep'
                sh '''
                  mkdir -p .sonar
                  curl -sSLo .sonar/build-wrapper-linux-x86.zip ${SONARQUBE_URL}/static/cpp/build-wrapper-linux-x86.zip 
                  unzip -o .sonar/build-wrapper-linux-x86.zip -d .sonar/
                '''
            }
        }
        stage('Build') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                sh '.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output make && make install'
            }
        }
        stage('Static Code Analysis') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                script {
                    def scannerHome = tool 'SonarScanner'; // Name of the SonarQube Scanner you created in "Global Tool Configuration" section
                    withSonarQubeEnv() {
                        sh "${scannerHome}/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner"
                    }
                }
            }
        }
        stage('Deploy EDU Board') {     
            when { anyOf {branch "release"; branch "test"} }
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(configName: DEPLOY_TARGET_BOARD, 
                                         transfers: [
                                             sshTransfer(cleanRemote: false, excludes: '',
                                                         execTimeout: 120000, 
                                                         flatten: false, 
                                                         makeEmptyDirs: false, 
                                                         noDefaultExcludes: false, 
                                                         patternSeparator: '[, ]+', 
                                                         remoteDirectory: REMOTE_DIR_BOARD, 
                                                         remoteDirectorySDF: false, 
                                                         removePrefix: '', 
                                                         sourceFiles: SOURCE_DIR_BOARD)
                                         ], 
                                         usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false) 
                    ]
                ) 
            }
        }
        stage('Deploy EDU FlastSat') {     
            when { anyOf {branch "release"; branch "test"} }
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(configName: DEPLOY_TARGET_FLATSAT, 
                                         transfers: [
                                             sshTransfer(cleanRemote: false, excludes: '',
                                                         execTimeout: 120000, 
                                                         flatten: false, 
                                                         makeEmptyDirs: false, 
                                                         noDefaultExcludes: false, 
                                                         patternSeparator: '[, ]+', 
                                                         remoteDirectory: REMOTE_DIR_FLATSAT, 
                                                         remoteDirectorySDF: false, 
                                                         removePrefix: '', 
                                                         sourceFiles: SOURCE_DIR_FLATSAT)
                                         ], 
                                         usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false) 
                    ]
                ) 
            }
        }
        stage('Deploy EDU Rover') {     
            when { anyOf {branch "release"; branch "test"} }
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(configName: DEPLOY_TARGET_ROVER, 
                                         transfers: [
                                             sshTransfer(cleanRemote: false, excludes: '',
                                                         execTimeout: 120000, 
                                                         flatten: false, 
                                                         makeEmptyDirs: false, 
                                                         noDefaultExcludes: false, 
                                                         patternSeparator: '[, ]+', 
                                                         remoteDirectory: REMOTE_DIR_ROVER, 
                                                         remoteDirectorySDF: false, 
                                                         removePrefix: '', 
                                                         sourceFiles: SOURCE_DIR_ROVER)
                                         ], 
                                         usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false) 
                    ]
                ) 
            }
        }
        stage('Unit Testing EDU Board') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make test'
            }
        }
        stage('Unit Testing EDU FlatSat') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make test'
            }
        }
        stage('Unit Testing EDU Rover') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make test'
            }
        }
        stage('Coverage Testing EDU Board') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make icov'
            }
        }
        stage('Coverage Testing EDU FlatSat') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make icov'
            }
        }
        stage('Coverage Testing EDU Rover') {
            when { anyOf {branch "release"; branch "test"} }
            steps {
                echo 'make icov'
            }
        }
    }
}
